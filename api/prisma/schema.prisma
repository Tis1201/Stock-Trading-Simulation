// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  password_hash String @db.VarChar(255)
  first_name String   @db.VarChar(100)
  last_name  String   @db.VarChar(100)
  phone      String?  @db.VarChar(20)
  email_verified_at DateTime?
  is_active   Boolean @default(true)
  last_login_at DateTime?
  login_attemps  Int @default(0)
  locked_until DateTime?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  
  roles UserRole[]
  notifications Notification[]
  watchlists Watchlist[]
  backtestJobs BacktestJob[]
  auditLogs AuditLog[]
  strategies Strategy[]
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(50)
  display_name String @db.VarChar(100)
  description String?
  is_active   Boolean @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  permissions RolePermission[]
  users UserRole[]


}

model Permissions {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(100)
  display_name String @db.VarChar(150)
  description String?
  resource String @db.VarChar(50)
  action String @db.VarChar(50)
  is_active   Boolean @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  roles RolePermission[]
}

model RolePermission {
  id Int @id @default(autoincrement())
  role_id Int
  permission_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission Permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
}

model UserRole {
  id Int @id @default(autoincrement())
  user_id Int
  role_id Int
  assigned_by Int
  assigned_at DateTime?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
}

model Notification {
  id Int @id @default(autoincrement())
  user_id Int
  title String
  type String @db.VarChar(50)
  message String @db.Text
  is_read Boolean @default(false)
  data Json?
  read_at DateTime?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Watchlist {
  id Int @id @default(autoincrement())
  user_id Int
  name String @db.VarChar(100)
  description String?
  is_default Boolean 
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items WatchlistStock[]
}

model WatchlistStock {
  id Int @id @default(autoincrement())
  watchlist_id Int
  stock_symbol String @db.VarChar(10)
  added_at DateTime @default(now())

  watchlist Watchlist @relation(fields: [watchlist_id], references: [id], onDelete: Cascade)
  stock Stock @relation(fields: [stock_symbol], references: [symbol], onDelete: Cascade)

  @@unique([watchlist_id, stock_symbol])
}

model BacktestJob{
  id Int @id @default(autoincrement())
  user_id Int
  strategy_id Int
  status String @db.VarChar(50)
  start_date DateTime?
  end_date DateTime?
  initial_capital Decimal @db.Decimal(15, 2)
  commission_rate   Decimal @db.Decimal(5, 4)
  job_config Json
  total_return      Decimal? @db.Decimal(10, 4)
  annual_return     Decimal? @db.Decimal(10, 4)
  max_drawdown      Decimal? @db.Decimal(10, 4)
  sharpe_ratio      Decimal? @db.Decimal(8, 4)
  win_rate          Decimal? @db.Decimal(5, 4)
  total_trades Int?
  profitable_trades Int?
  error_message String?
  started_at DateTime @default(now())
  completed_at DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

 

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  strategy Strategy @relation(fields: [strategy_id], references: [id], onDelete: Cascade)

  trades BacktestTrade[]
}

model AuditLog{
  id Int @id @default(autoincrement())
  user_id Int
  action String @db.VarChar(100)
  resource_type String @db.VarChar(100)
  resource_id Int?
  old_value Json?
  new_value Json?
  ip_address String? @db.VarChar(45)
  user_agent String? @db.VarChar(255)
  created_at DateTime @default(now())

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Strategy{
  id Int @id @default(autoincrement())
  user_id Int
  name String @db.VarChar(100)
  description String?
  strategy_config Json
  is_public Boolean @default(false)
  is_active Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  backtestJobs BacktestJob[]
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model BacktestTrade{
  id Int @id @default(autoincrement())
  backtest_job_id Int
  stock_symbol String @db.VarChar(10)
  trade_type String @db.VarChar(10) // "buy" or "sell"
  trade_date DateTime
  quantity Int
  price_per_share  Decimal @db.Decimal(10, 2)
  commission       Decimal @default(0) @db.Decimal(10, 2)
  total_amount     Decimal @db.Decimal(15, 2)
  portfolio_value  Decimal? @db.Decimal(15, 2)
  created_at DateTime @default(now())

  backtestJob BacktestJob @relation(fields: [backtest_job_id], references: [id], onDelete: Cascade)
  Stock Stock @relation(fields: [stock_symbol], references: [symbol], onDelete: Cascade)

  @@index([backtest_job_id])
}

model Stock{
  id Int @id @default(autoincrement())
  symbol String @unique @db.VarChar(10)
  company_name String @db.VarChar(100)
  exchange String @db.VarChar(50)
  sector String? @db.VarChar(100)
  industry String? @db.VarChar(100)
  market_cap Decimal? @db.Decimal(20, 2)
  description String? @db.Text
  is_active Boolean @default(true)
  listed_at DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  watchlistStocks WatchlistStock[]
  backtestTrades BacktestTrade[]
  stockPrices StockPrice[]
  tenicalIndicators TechnicalIndicator[]

}

model StockPrice{
  id Int @id @default(autoincrement())
  stock_symbol String @db.VarChar(10)
  trade_date DateTime
  open_price           Decimal @db.Decimal(10, 2)
  high_price           Decimal @db.Decimal(10, 2)
  low_price            Decimal @db.Decimal(10, 2)
  close_price          Decimal @db.Decimal(10, 2)
  volume               BigInt
  adjusted_close_price Decimal? @db.Decimal(10, 2)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Stock Stock @relation(fields: [stock_symbol], references: [symbol], onDelete: Cascade)

  @@unique([stock_symbol, trade_date])
  @@index([trade_date])
}

model TechnicalIndicator{
  id Int @id @default(autoincrement())
  stock_symbol String @db.VarChar(10)
  trade_date DateTime
  indicator_type String @db.VarChar(50) // e.g., "SMA", "EMA", "RSI"
  period_days Int
  value_1 Decimal @db.Decimal(15, 6)
  value_2 Decimal? @db.Decimal(15, 6)
  value_3 Decimal? @db.Decimal(15, 6)
  metadata Json?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Stock Stock @relation(fields: [stock_symbol], references: [symbol], onDelete: Cascade)

  @@index([stock_symbol, indicator_type, period_days, trade_date])
}